plugins {
	id 'maven-publish'
	id 'com.github.hierynomus.license' version '0.16.1' apply false
	id "dev.architectury.loom" version "1.2-SNAPSHOT" apply false

	// https://github.com/Juuxel/LoomQuiltflower
	id 'io.github.juuxel.loom-quiltflower' version '1.10.0' apply false

	// https://github.com/ReplayMod/preprocessor
	// https://github.com/Fallen-Breath/preprocessor
	id 'com.replaymod.preprocess' version '20c7ec554a'

	// https://github.com/Fallen-Breath/yamlang
	id 'me.fallenbreath.yamlang' version '1.3.0' apply false
}

preprocess {
	def mc114_fabric = createNode('1.14.4-fabric', 1_14_04, 'yarn')
	def mc115_fabric = createNode('1.15.2-fabric', 1_15_02, 'yarn')
	def mc116_fabric = createNode('1.16.5-fabric', 1_16_05, 'yarn')
	def mc117_fabric = createNode('1.17.1-fabric', 1_17_01, 'yarn')
	def mc118_fabric = createNode('1.18.2-fabric', 1_18_02, 'yarn')
	def mc119_fabric = createNode('1.19.4-fabric', 1_19_04, 'yarn')
	def mc120_fabric = createNode('1.20.1-fabric', 1_20_01, 'yarn')

	def mc115_forge  = createNode('1.15.2-forge' , 1_15_02, 'yarn')
	def mc116_forge  = createNode('1.16.5-forge' , 1_16_05, 'yarn')
	def mc117_forge  = createNode('1.17.1-forge' , 1_17_01, 'yarn')
	def mc118_forge  = createNode('1.18.2-forge' , 1_18_02, 'yarn')
	def mc119_forge  = createNode('1.19.4-forge' , 1_19_04, 'yarn')
	def mc120_forge  = createNode('1.20.1-forge' , 1_20_01, 'yarn')

	mc114_fabric.link(mc115_fabric, null)
	mc115_fabric.link(mc116_fabric, null)
	mc116_fabric.link(mc117_fabric, null)
	mc117_fabric.link(mc118_fabric, null)
	mc118_fabric.link(mc119_fabric, null)
	mc119_fabric.link(mc120_fabric, null)

	mc115_fabric.link(mc115_forge, null)
	mc116_fabric.link(mc116_forge, null)
	mc117_fabric.link(mc117_forge, null)
	mc118_fabric.link(mc118_forge, null)
	mc119_fabric.link(mc119_forge, null)
	mc120_fabric.link(mc120_forge, null)
}

tasks.register('buildAndGather') {
	subprojects {
		dependsOn project.tasks.named('build').get()
	}
	doFirst {
		println 'Gathering builds'
		def buildLibs = {
			p -> p.buildDir.toPath().resolve('libs')
		}
		delete fileTree(buildLibs(rootProject)) {
			include '*'
		}
		subprojects {
			copy {
				from(buildLibs(project)) {
					include '*.jar'
					exclude '*-dev.jar', '*-sources.jar'
				}
				into buildLibs(rootProject)
				duplicatesStrategy DuplicatesStrategy.INCLUDE
			}
		}
	}
}
