apply plugin: 'maven-publish'
apply plugin: 'com.github.hierynomus.license'
apply plugin: 'dev.architectury.loom'
apply plugin: 'io.github.juuxel.loom-quiltflower'
apply plugin: 'com.replaymod.preprocess'
apply plugin: 'me.fallenbreath.yamlang'

def mod_brand = (loom.platform.get() as String).toLowerCase()
assert mod_brand in ['fabric', 'forge']
assert project.name.endsWith('-' + mod_brand)  // optional check

int mcVersion = 1
preprocess {
	mcVersion = vars.get()["MC"] as int
	tabIndentation = true

	vars.put("MC", mcVersion)
	vars.put("FABRIC", mod_brand == 'fabric' ? 1 : 0)
	vars.put("FORGE", mod_brand == 'forge' ? 1 : 0)
}

repositories {
	maven {
		url 'https://jitpack.io'
	}
	maven {
		url 'https://www.cursemaven.com'
	}
}

// https://github.com/FabricMC/fabric-loader/issues/783
configurations {
	modRuntimeOnly.exclude group: 'net.fabricmc', module: 'fabric-loader'
}

dependencies {
	// loom
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

	if (mod_brand == 'fabric') {
		modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader_version}"
	} else {
		forge "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"
	}

	// runtime mods
//	if (mcVersion < 11904 && mod_brand == 'fabric') {
//		modRuntimeOnly(mcVersion < 11900 ? "com.github.astei:lazydfu:0.1.2" : "com.github.Fallen-Breath:lazydfu:a7cfc44c0c")
//	}
}

loom {
	runConfigs.all {
		// to make sure it generates all "Minecraft Client (:subproject_name)" applications
		ideConfigGenerated = true
		runDir '../../run'
		vmArgs '-Dmixin.debug.export=true'
	}

	if (mod_brand == 'forge') {
		forge {
			mixinConfigs = ["template_mod.mixins.json"]
		}
	}
}

remapJar {
	remapperIsolation = true
}

if (mcVersion >= 11800) {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
} else if (mcVersion >= 11700) {
	sourceCompatibility = JavaVersion.VERSION_16
	targetCompatibility = JavaVersion.VERSION_16
} else {
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
}

String versionSuffix = ''
// detect github action environment variables
// https://docs.github.com/en/actions/learn-github-actions/environment-variables#default-environment-variables
if (System.getenv("BUILD_RELEASE") != "true") {
	String buildNumber = System.getenv("BUILD_ID")
	versionSuffix += buildNumber != null ? ('+build.' + buildNumber) : '-SHAPSHOT'
}
String fullModVersion = project.mod_version + versionSuffix

version = 'v' + fullModVersion
group = project.maven_group
archivesBaseName = project.archives_base_name + '-mc' + project.minecraft_version + '-' + mod_brand

// See https://youtrack.jetbrains.com/issue/IDEA-296490
// if IDEA complains about "Cannot resolve resource filtering of MatchingCopyAction" and you want to know why
processResources {
	inputs.property "id", project.mod_id
	inputs.property "name", project.mod_name
	inputs.property "version", fullModVersion
	inputs.property "minecraft_dependency", project.minecraft_dependency

	[
			'fabric': ['fabric.mod.json'],
			'forge': ['META-INF', 'META-INF/mods.toml', 'pack.mcmeta'],
	].forEach { brand, files ->
		files.forEach { name ->
			if (brand == mod_brand) {
				filesMatching(name) {
					def valueMap = [
							"id": project.mod_id,
							"name": project.mod_name,
							"version": fullModVersion,
							"minecraft_dependency": project.minecraft_dependency,
					]
					expand valueMap
				}
			} else {
				exclude name
			}
		}
	}

	if (mod_brand == 'forge') {
		// forge requires the mod icon file to be at the resource root
        filesMatching('assets/template_mod/icon.png') { f -> f.path = 'icon.png' }
	}
}

// https://github.com/Fallen-Breath/yamlang
yamlang {
	targetSourceSets = [sourceSets.main]
	inputDir = 'assets/template_mod/lang'
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile).configureEach {
	options.encoding = "UTF-8"
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from(rootProject.file('LICENSE')) {
		rename { "${it}_${project.archives_base_name}" }
	}
}

// https://github.com/hierynomus/license-gradle-plugin
license {
	// use "gradle licenseFormat" to apply license headers
	header = rootProject.file('HEADER.txt')
	include '**/*.java'
	skipExistingHeaders = true

	headerDefinitions {
		// ref: https://github.com/mathieucarbou/license-maven-plugin/blob/4c42374bb737378f5022a3a36849d5e23ac326ea/license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/header/HeaderType.java#L48
		// modification: add a newline at the end
		SLASHSTAR_STYLE_NEWLINE {
			firstLine = "/*"
			beforeEachLine = " * "
			endLine = " */" + System.lineSeparator()
			afterEachLine = ""
			skipLinePattern = null
			firstLineDetectionPattern = "(\\s|\\t)*/\\*.*\$"
			lastLineDetectionPattern = ".*\\*/(\\s|\\t)*\$"
			allowBlankLines = false
			isMultiline = true
			padLines = false
		}
	}
	mapping {
		java = 'SLASHSTAR_STYLE_NEWLINE'
	}
	ext {
		name = project.mod_name
		author = 'Fallen_Breath'
		year = Calendar.getInstance().get(Calendar.YEAR).toString()
	}
}
classes.dependsOn licenseFormatMain
testClasses.dependsOn licenseFormatTest

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			artifactId archivesBaseName

			from components.java
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}
